[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif _c.set == 'Enhanced' then"
position = "before"
payload = '''if specific_vars.bonus_mult then
	localize{type = 'other', key = 'card_extra_mult', nodes = desc_nodes, vars = {specific_vars.bonus_mult}}
end
if specific_vars.bonus_xmult then
	localize{type = 'other', key = 'card_extra_xmult', nodes = desc_nodes, vars = {specific_vars.bonus_xmult}}
end
if specific_vars.bonus_hmult then
	localize{type = 'other', key = 'card_extra_hmult', nodes = desc_nodes, vars = {specific_vars.bonus_hmult}}
end
if specific_vars.bonus_hxmult then
	localize{type = 'other', key = 'card_extra_hxmult', nodes = desc_nodes, vars = {specific_vars.bonus_hxmult}}
end'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif _c.set == 'Booster' then"
position = "before"
payload = '''if specific_vars and specific_vars.bonus_mult then
	localize{type = 'other', key = 'card_extra_mult', nodes = desc_nodes, vars = {specific_vars.bonus_mult}}
end
if specific_vars and specific_vars.bonus_xmult then
	localize{type = 'other', key = 'card_extra_xmult', nodes = desc_nodes, vars = {specific_vars.bonus_xmult}}
end
if specific_vars and specific_vars.bonus_hmult then
	localize{type = 'other', key = 'card_extra_hmult', nodes = desc_nodes, vars = {specific_vars.bonus_hmult}}
end
if specific_vars and specific_vars.bonus_hxmult then
	localize{type = 'other', key = 'card_extra_hxmult', nodes = desc_nodes, vars = {specific_vars.bonus_hxmult}}
end'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "nominal_chips = self.base.nominal > 0 and self.base.nominal or nil,"
position = "after"
payload = '''bonus_mult = (self.ability.perma_mult or 0) > 0 and (self.ability.perma_mult or 0) or nil,
bonus_xmult = (self.ability.perma_xmult or 0) > 1 and (self.ability.perma_xmult or 0) or nil,
bonus_hmult = (self.ability.perma_hmult or 0) > 0 and (self.ability.perma_hmult or 0) or nil,
bonus_hxmult = (self.ability.perma_hxmult or 0) > 1 and (self.ability.perma_hxmult or 0) or nil,'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "perma_bonus = self.ability and self.ability.perma_bonus or 0,"
position = "after"
payload = '''perma_mult = self.ability and self.ability.perma_mult or 0,
perma_xmult = self.ability and self.ability.perma_xmult or 1,
perma_hmult = self.ability and self.ability.perma_hmult or 0,
perma_hxmult = self.ability and self.ability.perma_hxmult or 1,'''
match_indent = true
overwrite = false

# create_UIBox_your_collection()
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "UIBox_button({button = 'your_collection_seals', label = {localize('b_seals')}, minw = 5, id = 'your_collection_seals'}),"
position = "after"
payload = '''UIBox_button({button = 'your_collection_stamps', label = {localize('b_stamps')}, minw = 5, id = 'your_collection_stamps'}),'''
match_indent = true

# Card:draw()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "UIBox_button({button = 'your_collection_seals', label = {localize('b_seals')}, minw = 5, id = 'your_collection_seals'}),"
position = "after"
payload = '''UIBox_button({button = 'your_collection_stamps', label = {localize('b_stamps')}, minw = 5, id = 'your_collection_stamps'}),'''
match_indent = true

# generate_card_ui()
[[patches]]
[patches.regex]
target = 'functions/common_events.lua'
pattern = "(?<indent>[\t ]*)if v == 'eternal'"
line_prepend = '$indent'
position = 'before'
payload = '''if SMODS.Stamp.reverse_lookup[v] then info_queue[#info_queue+1] = {key = v, set = 'Other' } end'''
match_indent = true

# get_badge_colour()
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = 'return G.BADGE_COL[key] or {1, 0, 0, 1}'
position = 'before'
payload = '''
for k, v in pairs(SMODS.Stamps) do
	G.BADGE_COL[k:lower()..'_stamp'] = v.colour
end
'''
match_indent = true

# Card:draw()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.seal then badges[#badges + 1] = string.lower(self.seal)..'_seal' end"
position = "after"
payload = '''if self.seal and SMODS.Stamp.reverse_lookup[self.seal..'_stamp'] then badges[#badges] = string.lower(self.seal)..'_stamp' end'''
match_indent = true


# Card:set_seal()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:set_seal(_seal, silent, immediate)"
position = "after"
payload = '''
	local prev_seal_stamp = self:get_seal()
	local seal_stamp_obj
	if prev_seal_stamp and prev_seal_stamp ~= _seal then
		seal_stamp_obj = SMODS.Seals[string.lower(prev_seal_stamp)]
		if seal_stamp_obj and seal_stamp_obj.unapply and type(seal_stamp_obj.unapply) == "function" then
			seal_stamp_obj.unapply(self)
		end
		seal_stamp_obj = SMODS.Stamps[string.lower(prev_seal_stamp)]
		if seal_stamp_obj and seal_stamp_obj.unapply and type(seal_stamp_obj.unapply) == "function" then
			seal_stamp_obj.unapply(self)
		end
	end
	seal_stamp_obj = nil
'''
match_indent = true

# Card:set_seal()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Gold Card' and self.seal == 'Gold' and self.playing_card then"
position = "before"
payload = '''
	local seal_stamp_obj
	if _seal then
		seal_stamp_obj = SMODS.Seals[string.lower(_seal)]
		if seal_stamp_obj and seal_stamp_obj.apply and type(seal_stamp_obj.apply) == "function" then
			seal_stamp_obj.apply(self)
		end
		seal_stamp_obj = SMODS.Stamps[string.lower(_seal)]
		if seal_stamp_obj and seal_stamp_obj.apply and type(seal_stamp_obj.apply) == "function" then
			seal_stamp_obj.apply(self)
		end
	end
'''
match_indent = true

# Card:add_to_deck()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:add_to_deck(from_debuff)"
position = "after"
payload = '''
	if (not self.added_to_deck) and G.STAGE == G.STAGES.RUN then
		if self.seal then
			seal_stamp_obj = SMODS.Seals[string.lower(self.seal)]
			if seal_stamp_obj and seal_stamp_obj.deck_add and type(seal_stamp_obj.deck_add) == 'function' then
				seal_stamp_obj.deck_add(self)
			end
			seal_stamp_obj = SMODS.Stamps[string.lower(self.seal)]
			if seal_stamp_obj and seal_stamp_obj.deck_add and type(seal_stamp_obj.deck_add) == "function" then
				seal_stamp_obj.deck_add(self)
			end
		end
	end
'''
match_indent = true

# Card:remove_from_deck()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:remove_from_deck(from_debuff)"
position = "after"
payload = '''
	if self.added_to_deck and G.STAGE == G.STAGES.RUN then
		if self.seal then
			seal_stamp_obj = SMODS.Seals[string.lower(self.seal)]
			if seal_stamp_obj and seal_stamp_obj.deck_remove and type(seal_stamp_obj.deck_remove) == 'function' then
				seal_stamp_obj.deck_remove(self)
			end
			seal_stamp_obj = SMODS.Stamps[string.lower(self.seal)]
			if seal_stamp_obj and seal_stamp_obj.deck_remove and type(seal_stamp_obj.deck_remove) == "function" then
				seal_stamp_obj.deck_remove(self)
			end
		end
	end
'''
match_indent = true

# Game:init_game_object()
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "last_tarot_planet = nil,"
position = "before"
payload = '''
amm_data = {
	suit_levels = {
	},
},
'''
match_indent = true


# Card:generate_UIBox_ability_table()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "nominal_chips = self.base.nominal > 0 and self.base.nominal or nil,"
position = "after"
payload = '''
amm_suit_bonus = G.GAME.amm_data.suit_levels[self.base.suit],
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif _c.set == 'Enhanced' then"
position = "before"
payload = '''
if specific_vars.amm_suit_bonus and specific_vars.amm_suit_bonus.level > 1 then
	localize{type = 'other', key = 'card_amm_suit_bonus', nodes = desc_nodes, vars = {specific_vars.amm_suit_bonus.level, specific_vars.amm_suit_bonus.chips, specific_vars.amm_suit_bonus.mult, card and localize(card.base.suit, "suits_plural"), colours = {
			(specific_vars.amm_suit_bonus.level<=1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, specific_vars.amm_suit_bonus.level)]),
			G.C.SUITS[card and card.base.suit],
		}}}
end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif _c.set == 'Booster' then"
position = "before"
payload = '''
if card and card.ability.effect ~= 'Stone Card' and (not card.config.center.no_suit) and (specific_vars and specific_vars.amm_suit_bonus and specific_vars.amm_suit_bonus.level > 1) then
	localize{type = 'other', key = 'card_amm_suit_bonus', nodes = desc_nodes, vars = {specific_vars.amm_suit_bonus.level, specific_vars.amm_suit_bonus.chips, specific_vars.amm_suit_bonus.mult, card and localize(card.base.suit, "suits_plural"), colours = {
			(specific_vars.amm_suit_bonus.level<=1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, specific_vars.amm_suit_bonus.level)]),
			G.C.SUITS[card and card.base.suit],
		}}}
end
'''
match_indent = true
overwrite = false

# G.UIDEF.run_info
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "tab_definition_function = create_UIBox_current_hands,"
position = "after"
payload = '''
},{
	label = localize('b_suits'),
	tab_definition_function = create_UIBox_current_suits,

'''
match_indent = true
overwrite = false

# yeet
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/game_object.lua"]'
pattern = '''
if specific_vars and specific_vars.bonus_chips then
	local remaining_bonus_chips = specific_vars.bonus_chips - (self.config.bonus or 0)
	if remaining_bonus_chips > 0 then
		localize { type = 'other', key = 'card_extra_chips', nodes = desc_nodes, vars = { specific_vars.bonus_chips - (self.config.bonus or 0) } }
	end
end
'''
position = "after"
payload = '''
if specific_vars and specific_vars.bonus_mult then
	localize{type = 'other', key = 'card_extra_mult', nodes = desc_nodes, vars = {specific_vars.bonus_mult}}
end
if specific_vars and specific_vars.bonus_xmult then
	localize{type = 'other', key = 'card_extra_xmult', nodes = desc_nodes, vars = {specific_vars.bonus_xmult}}
end
if specific_vars and specific_vars.bonus_hmult then
	localize{type = 'other', key = 'card_extra_hmult', nodes = desc_nodes, vars = {specific_vars.bonus_hmult}}
end
if specific_vars and specific_vars.bonus_hxmult then
	localize{type = 'other', key = 'card_extra_hxmult', nodes = desc_nodes, vars = {specific_vars.bonus_hxmult}}
end
if card and card.ability.effect ~= 'Stone Card' and (not card.config.center.no_suit) and (specific_vars and specific_vars.amm_suit_bonus and specific_vars.amm_suit_bonus.level > 1) then
	localize{type = 'other', key = 'card_amm_suit_bonus', nodes = desc_nodes, vars = {specific_vars.amm_suit_bonus.level, specific_vars.amm_suit_bonus.chips, specific_vars.amm_suit_bonus.mult, card and localize(card.base.suit, "suits_plural"), colours = {
			(specific_vars.amm_suit_bonus.level<=1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, specific_vars.amm_suit_bonus.level)]),
			G.C.SUITS[card and card.base.suit],
		}}}
end
'''
match_indent = true
overwrite = false

# new context? new context? new context?
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''
				G.jokers.config.card_limit = G.jokers.config.card_limit + self.edition.card_limit
			end
		end
	end
end
'''
position = "after"
payload = '''
SMODS.calculate_context({amm_added_card = true, from_debuff = from_debuff, other_card = self})
'''
match_indent = true
overwrite = false
