[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

#
# STAMPAPI
#

# generate_card_ui()
[[patches]]
[patches.regex]
target = 'functions/common_events.lua'
pattern = "(?<indent>[\t ]*)if v == 'eternal'"
line_prepend = '$indent'
position = 'before'
payload = '''if SMODS.Stamp.reverse_lookup[v] then info_queue[#info_queue+1] = {key = v, set = 'Other' } end'''
match_indent = true

# get_badge_colour()
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = 'return G.BADGE_COL[key] or {1, 0, 0, 1}'
position = 'before'
payload = '''
for k, v in pairs(SMODS.Stamps) do
	G.BADGE_COL[k:lower()..'_stamp'] = v.colour
end
'''
match_indent = true

# Card:draw()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.seal then badges[#badges + 1] = string.lower(self.seal)..'_seal' end"
position = "after"
payload = '''if self.seal and SMODS.Stamp.reverse_lookup[self.seal..'_stamp'] then badges[#badges] = string.lower(self.seal)..'_stamp' end'''
match_indent = true


# Card:set_seal()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:set_seal(_seal, silent, immediate)"
position = "after"
payload = '''
	local prev_seal_stamp = self:get_seal()
	local seal_stamp_obj
	if prev_seal_stamp and prev_seal_stamp ~= _seal then
		seal_stamp_obj = SMODS.Seals[string.lower(prev_seal_stamp)]
		if seal_stamp_obj and seal_stamp_obj.unapply and type(seal_stamp_obj.unapply) == "function" then
			seal_stamp_obj.unapply(self)
		end
		seal_stamp_obj = SMODS.Stamps[string.lower(prev_seal_stamp)]
		if seal_stamp_obj and seal_stamp_obj.unapply and type(seal_stamp_obj.unapply) == "function" then
			seal_stamp_obj.unapply(self)
		end
	end
	seal_stamp_obj = nil
'''
match_indent = true

# Card:set_seal()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Gold Card' and self.seal == 'Gold' and self.playing_card then"
position = "before"
payload = '''
	local seal_stamp_obj
	if _seal then
		seal_stamp_obj = SMODS.Seals[string.lower(_seal)]
		if seal_stamp_obj and seal_stamp_obj.apply and type(seal_stamp_obj.apply) == "function" then
			seal_stamp_obj.apply(self)
		end
		seal_stamp_obj = SMODS.Stamps[string.lower(_seal)]
		if seal_stamp_obj and seal_stamp_obj.apply and type(seal_stamp_obj.apply) == "function" then
			seal_stamp_obj.apply(self)
		end
	end
'''
match_indent = true

# Card:add_to_deck()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:add_to_deck(from_debuff)"
position = "after"
payload = '''
	if (not self.added_to_deck) and G.STAGE == G.STAGES.RUN then
		if self.seal then
			seal_stamp_obj = SMODS.Seals[string.lower(self.seal)]
			if seal_stamp_obj and seal_stamp_obj.deck_add and type(seal_stamp_obj.deck_add) == 'function' then
				seal_stamp_obj.deck_add(self)
			end
			seal_stamp_obj = SMODS.Stamps[string.lower(self.seal)]
			if seal_stamp_obj and seal_stamp_obj.deck_add and type(seal_stamp_obj.deck_add) == "function" then
				seal_stamp_obj.deck_add(self)
			end
		end
	end
'''
match_indent = true

# Card:remove_from_deck()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:remove_from_deck(from_debuff)"
position = "after"
payload = '''
	if self.added_to_deck and G.STAGE == G.STAGES.RUN then
		if self.seal then
			seal_stamp_obj = SMODS.Seals[string.lower(self.seal)]
			if seal_stamp_obj and seal_stamp_obj.deck_remove and type(seal_stamp_obj.deck_remove) == 'function' then
				seal_stamp_obj.deck_remove(self)
			end
			seal_stamp_obj = SMODS.Stamps[string.lower(self.seal)]
			if seal_stamp_obj and seal_stamp_obj.deck_remove and type(seal_stamp_obj.deck_remove) == "function" then
				seal_stamp_obj.deck_remove(self)
			end
		end
	end
'''
match_indent = true

#
# SUIT LEVELS SUITLEVELS
#

# Game:init_game_object()
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "last_tarot_planet = nil,"
position = "before"
payload = '''
amm_data = {
	suit_levels = {
	},
},
'''
match_indent = true


# Card:generate_UIBox_ability_table()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "nominal_chips = self.base.nominal > 0 and self.base.nominal or nil,"
position = "after"
payload = '''
amm_suit_bonus = G.GAME.amm_data.suit_levels[self.base.suit],
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif _c.set == 'Enhanced' then"
position = "before"
payload = '''
if specific_vars.amm_suit_bonus and specific_vars.amm_suit_bonus.level > 1 then
	localize{type = 'other', key = 'card_amm_suit_bonus', nodes = desc_nodes, vars = {specific_vars.amm_suit_bonus.level, specific_vars.amm_suit_bonus.chips, specific_vars.amm_suit_bonus.mult, card and localize(card.base.suit, "suits_plural"), colours = {
			(specific_vars.amm_suit_bonus.level<=1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, specific_vars.amm_suit_bonus.level)]),
			G.C.SUITS[card and card.base.suit],
		}}}
end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif _c.set == 'Booster' then"
position = "before"
payload = '''
if card and card.ability.effect ~= 'Stone Card' and (not card.config.center.no_suit) and (specific_vars and specific_vars.amm_suit_bonus and specific_vars.amm_suit_bonus.level > 1) then
	localize{type = 'other', key = 'card_amm_suit_bonus', nodes = desc_nodes, vars = {specific_vars.amm_suit_bonus.level, specific_vars.amm_suit_bonus.chips, specific_vars.amm_suit_bonus.mult, card and localize(card.base.suit, "suits_plural"), colours = {
			(specific_vars.amm_suit_bonus.level<=1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, specific_vars.amm_suit_bonus.level)]),
			G.C.SUITS[card and card.base.suit],
		}}}
end
'''
match_indent = true
overwrite = false

# G.UIDEF.run_info
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = """tab_definition_function = create_UIBox_current_hands,
},"""
position = "after"
payload = '''
{
	label = localize('b_suits'),
	tab_definition_function = create_UIBox_current_suits,
},
'''
match_indent = true
overwrite = false

# yeet
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/game_object.lua"]'
pattern = '''
if specific_vars and specific_vars.bonus_h_dollars then
	localize{type = 'other', key = 'card_extra_h_dollars', nodes = desc_nodes, vars = {SMODS.signed_dollars(specific_vars.bonus_h_dollars)}}
end
'''
position = "after"
payload = '''
if card and (not SMODS.has_no_suit(card)) and (specific_vars and specific_vars.amm_suit_bonus and specific_vars.amm_suit_bonus.level > 1) then
	localize{type = 'other', key = 'card_amm_suit_bonus', nodes = desc_nodes, vars = {specific_vars.amm_suit_bonus.level, specific_vars.amm_suit_bonus.chips, specific_vars.amm_suit_bonus.mult, card and localize(card.base.suit, "suits_plural"), colours = {
			(specific_vars.amm_suit_bonus.level<=1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, specific_vars.amm_suit_bonus.level)]),
			G.C.SUITS[card and card.base.suit],
		}}}
end
'''
match_indent = true
overwrite = false

#
# ODDITYAPI
#

# G.FUNCS.use_card()
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if card.area and (not nc or card.area == G.pack_cards) then card.area:remove_card(card) end"
position = "before"
payload = '''local oddityapi_check_booster = false
if card.ability.set == "Oddity" and card.area == G.pack_cards then nc = true
oddityapi_check_booster = true end'''
match_indent = true
overwrite = false
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "e.config.ref_table:use_consumeable(area)"
position = "before"
payload = '''if oddityapi_check_booster == false then'''
match_indent = true
overwrite = false
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "SMODS.calculate_context({using_consumeable = true, consumeable = card, area = card.from_area})"
position = "after"
payload = '''end'''
match_indent = true
overwrite = false

# G.FUNCS.can_use_consumeable()
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if e.config.ref_table:can_use_consumeable() then"
position = "before"
payload = '''if e.config.ref_table.ability.set == 'Oddity' and e.config.ref_table.area == G.pack_cards then
	if #G.consumeables.cards < G.consumeables.config.card_limit then
		e.config.colour = G.C.GREEN
		e.config.button = 'use_card'
	elseif #G.consumeables.cards >= G.consumeables.config.card_limit then
		e.config.colour = G.C.UI.BACKGROUND_INACTIVE
		e.config.button = nil
	end
else'''
match_indent = true
overwrite = false

# this is dumb
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.FUNCS.can_select_card = function(e)"
position = "before"
payload = '''end'''
match_indent = true
overwrite = false

# get_current_pool()
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "for k, v in ipairs(_starting_pool) do"
match_indent = true
overwrite = false
position = 'before'
payload = '''
if _legendary and _type == 'Oddity' then
	_starting_pool, _pool_key = SMODS.ConsumableTypes[_type].rarity_pools[-4], _type.."-4"..(_append or '')
end
'''


#
# ASPECTAPI
#

# Game:start_up()
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = "self.shared_seals = {"
match_indent = true
overwrite = false
position = 'before'
payload = '''
self.shared_aspects = {}
'''

# Game:init_item_prototypes	()
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = "self.P_SEALS = {"
match_indent = true
overwrite = false
position = 'before'
payload = '''
self.P_ASPECTS = {}
'''

# Game:init_item_prototypes()
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = "self.P_CENTER_POOLS = {"
match_indent = true
overwrite = false
position = 'after'
payload = '''
Aspect = {},
'''

# Card:generate_UIBox_ability_table()
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "if self.seal then badges[#badges + 1] = string.lower(self.seal)..'_seal' end"
match_indent = true
overwrite = false
position = 'after'
payload = "if self.aspect then badges[#badges + 1] = string.lower(self.aspect)..'_aspect' end"

# Card:save()
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "seal = self.seal,"
match_indent = true
overwrite = false
position = 'after'
payload = '''
aspect = self.aspect,
'''
# Card:load()
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "self.seal = cardTable.seal"
match_indent = true
overwrite = false
position = 'after'
payload = '''
self.aspect = cardTable.aspect
'''

# eval_card()
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "-- TARGET: evaluate your own repetition effects"
match_indent = true
overwrite = false
position = 'after'
payload = '''
if card.aspect then
	local aspects = card:calculate_aspect(context)
	if aspects then
		ret.aspects = aspects
	end
end
'''

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = "-- Playing cards at end of round"
match_indent = true
overwrite = false
position = 'before'
payload = '''
SMODS.calculate_effect_table_key(effect_table, 'aspects', card, ret)
'''

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "-- TARGET: evaluate your own general effects"
match_indent = true
overwrite = false
position = 'after'
payload = '''
if card.aspect then
	local aspects = card:calculate_aspect(context)
	if aspects then
		ret.aspects = aspects
	end
end
'''

# generate_card_ui()
#[[patches]]
#[patches.pattern]
#target = 'functions/common_events.lua'
#pattern = "local seal = G.P_SEALS[v] or G.P_SEALS[SMODS.Seal.badge_to_key[v] or '']"
#match_indent = true
#overwrite = false
#position = 'before'
#payload = '''
#local aspect = G.P_ASPECTS[v] or G.P_ASPECTS[AMM.Aspect.badge_to_key[v] or '']
#if aspect then
#	info_queue[#info_queue+1] = aspect
#end
#'''
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''   end

    if main_end then 
        desc_nodes[#desc_nodes+1] = main_end 
    end'''
match_indent = true
overwrite = false
position = 'before'
payload = '''
elseif _c.set == "Aspect" then
    localize{type = 'descriptions', key = _c.key, set = "Aspect", nodes = desc_nodes, vars = _c.vars or loc_vars}
'''

# copy_card()
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "new_card:set_seal(other.seal, true)"
match_indent = true
overwrite = false
position = 'before'
payload = '''
new_card:set_aspect(other.aspect,true)
'''

# G.UIDEF.card_h_popup()
# dirty patch, open to improvements
# you two have any ideas?
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = 'badges[#badges + 1] = create_badge(localize(v, "labels"), get_badge_colour(v))'
match_indent = true
overwrite = true
position = 'at'
payload = '''
badges[#badges + 1] = create_badge(localize(v, "labels"), get_badge_colour(v), amm_get_badge_text_colour(v))
'''

# get_badge_colour()
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = 'return G.BADGE_COL[key] or {1, 0, 0, 1}'
position = 'before'
payload = '''
for k, v in pairs(AMM.Aspects) do
	G.BADGE_COL[k:lower()..'_aspect'] = v.badge_colour or v.colour
end
'''
match_indent = true

#
# BOTTLE API? IDFK, BOTTLES
#

# Game:start_up()
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = "self.shared_seals = {"
match_indent = true
overwrite = false
position = 'before'
payload = '''
--self.shared_bottle = nil
'''

# Card:generate_UIBox_ability_table()
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "if self.seal then badges[#badges + 1] = string.lower(self.seal)..'_seal' end"
match_indent = true
overwrite = false
position = 'after'
payload = "if self.bottle then badges[#badges + 1] = 'bottle' end"

# copy_card()
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "new_card:set_seal(other.seal, true)"
match_indent = true
overwrite = false
position = 'before'
payload = '''
new_card.bottle = other.bottle
'''

# Card:save()
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "seal = self.seal,"
match_indent = true
overwrite = false
position = 'after'
payload = '''
bottle = self.bottle,
'''
# Card:load()
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "self.seal = cardTable.seal"
match_indent = true
overwrite = false
position = 'after'
payload = '''
self.bottle = cardTable.bottle
'''

#
# MISCELLANY
#

# new context? new context? new context?
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''
				G.jokers.config.card_limit = G.jokers.config.card_limit + self.edition.card_limit
			end
		end
	end
end
'''
position = "after"
payload = '''
SMODS.calculate_context({amm_added_card = true, from_debuff = from_debuff, other_card = self})
'''
match_indent = true
overwrite = false

#
# GRAVEYARD -- MOST OF THIS IS BY MYSTHAPS
#

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "G.playing_cards = {}"
position = "after"
payload = '''
G.graveyard = {}
self.graveyard_area = CardArea(
    100, 0,
    CAI.discard_W,CAI.discard_H,
{card_limit = 50000, type = 'graveyard'})
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "Moveable.remove(self)"
position = "before"
payload = '''
if G.graveyard and G.graveyard_area and self.playing_card and AMM.api.graveyard.active and G.STAGE == G.STAGES.RUN and self.back ~= 'viewed_back' then
    if not self.graveyard then
        local _card = copy_card(self, nil, nil, G.playing_card)
        _card.graveyard = true
        _card.area = G.graveyard_area
        table.insert(G.graveyard, _card)
        G.graveyard_area:emplace(_card)
		_card.playing_card = #G.graveyard
		_card:start_materialize(nil, true)
        _card:add_to_graveyard()
    	SMODS.calculate_context({amm_buried_card = true, other_card = _card})
    else
        for k, v in ipairs(G.graveyard) do
            if v == self then
                table.remove(G.graveyard, k)
                break
            end
        end
        for k, v in ipairs(G.graveyard) do
            v.playing_card = k
        end
    end
end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "table.insert(G.playing_cards, v)"
position = "at"
payload = '''
if v.graveyard then
    table.insert(G.graveyard, v)
else
    table.insert(G.playing_cards, v)
end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = "self.ARGS.invisible_area_types = self.ARGS.invisible_area_types or {discard=1, voucher=1, play=1, consumeable=1, title = 1, title_2 = 1}"
position = "after"
payload = '''
self.ARGS.invisible_area_types.graveyard = 1
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = "function CardArea:align_cards()"
position = "after"
payload = '''
if self == G.graveyard then return end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = "if area == G.discard then"
position = "before"
payload = '''
if area == G.graveyard then
    card.T.r = 0
end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "bypass_lock = self.bypass_lock,"
position = "after"
payload = '''
graveyard = self.graveyard,
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.bypass_lock = cardTable.bypass_lock"
position = "after"
payload = '''
self.graveyard = cardTable.graveyard
'''
match_indent = true
overwrite = false

# graveyard calc
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = '''
local effect = G.GAME.selected_back:trigger_effect(context)
if effect then SMODS.calculate_effect(effect, G.deck.cards[1] or G.deck) end
'''
position = "before"
payload = '''
if SMODS.optional_features.cardareas.graveyard then
	context.cardarea = G.graveyard_area
	for i=1, #G.graveyard_area.cards do
		--print("hi autumn")
		if return_table then 
			return_table[#return_table+1] = eval_card(G.graveyard_area.cards[i], context)    
		else
			local effects = {eval_card(G.graveyard_area.cards[i], context)}
			SMODS.calculate_quantum_enhancements(G.graveyard_area.cards[i], effects, context)
			SMODS.trigger_effects(effects, G.graveyard_area.cards[i])
		end
	end
end
'''
match_indent = true
overwrite = false
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''
elseif card.area == G.discard or card.area == G.vouchers then
'''
position = "before"
payload = '''
elseif card.area == G.graveyard_area then
	y_off = -0.44*G.CARD_H
	card = G.deck.cards[1] or G.deck
	card_aligned = 'tm'
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = "self.children.area_uibox = UIBox{"
position = "before"
payload = '''
if self == G.deck and SMODS.optional_features.amm.graveyard then
	table.insert(card_count.nodes, 5, {n=G.UIT.T, config={text = ' (', scale = 0.25, colour = G.C.JOKER_GREY}})
	table.insert(card_count.nodes, 6, {n=G.UIT.T, config={ref_table = G.graveyard_area.config, ref_value = 'card_count', scale = 0.3, colour = G.C.JOKER_GREY}})
	table.insert(card_count.nodes, 7, {n=G.UIT.T, config={text = ')', scale = 0.25, colour = G.C.JOKER_GREY}})
end
'''
match_indent = true
overwrite = false

#
# MOD COMPAT
#

# yeet
[[patches]]
[patches.pattern]
target = '=[SMODS Pokermon "functions/pokefunctions.lua"]'
pattern = '''
local previous_upgrade = nil
'''
position = "after"
payload = '''
local previous_stamp = nil

if card.seal and SMODS.Stamps[string.lower(card.seal)] then
	previous_stamp = card.seal
end
'''
match_indent = true
overwrite = false

# yeet
[[patches]]
[patches.pattern]
target = '=[SMODS Pokermon "functions/pokefunctions.lua"]'
pattern = '''
if previous_edition then
'''
position = "before"
payload = '''
if previous_stamp then
	new_card:set_seal(previous_stamp, nil, true)
end
'''
match_indent = true
overwrite = false

# yeet
[[patches]]
[patches.pattern]
target = '=[SMODS victinscollection "modules/jokers/champion.lua"]'
pattern = '''
subtitle = {
	text = {"The game just got harder!"}
}
'''
position = "at"
payload = '''
subtitle = "The game just got harder!"
'''
match_indent = true
overwrite = true
[[patches]]
[patches.pattern]
target = '=[SMODS victinscollection "modules/jokers/champions_belt.lua"]'
pattern = '''
subtitle = {
	text = {"The game just got harder!",}
}
'''
position = "at"
payload = '''
subtitle = "The game just got harder!"
'''
match_indent = true
overwrite = true