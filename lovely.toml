[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif _c.set == 'Enhanced' then"
position = "before"
payload = '''
if specific_vars and specific_vars.bonus_xchips then
	localize{type = 'other', key = 'card_extra_xchips', nodes = desc_nodes, vars = {specific_vars.bonus_xchips}}
end
if specific_vars and specific_vars.bonus_mult then
	localize{type = 'other', key = 'card_extra_mult', nodes = desc_nodes, vars = {specific_vars.bonus_mult}}
end
if specific_vars and specific_vars.bonus_xmult then
	localize{type = 'other', key = 'card_extra_xmult', nodes = desc_nodes, vars = {specific_vars.bonus_xmult}}
end
if specific_vars and specific_vars.bonus_hchips then
	localize{type = 'other', key = 'card_extra_hchips', nodes = desc_nodes, vars = {specific_vars.bonus_hchips}}
end
if specific_vars and specific_vars.bonus_hxchips then
	localize{type = 'other', key = 'card_extra_hxchips', nodes = desc_nodes, vars = {specific_vars.bonus_hxchips}}
end
if specific_vars and specific_vars.bonus_hmult then
	localize{type = 'other', key = 'card_extra_hmult', nodes = desc_nodes, vars = {specific_vars.bonus_hmult}}
end
if specific_vars and specific_vars.bonus_hxmult then
	localize{type = 'other', key = 'card_extra_hxmult', nodes = desc_nodes, vars = {specific_vars.bonus_hxmult}}
end'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif _c.set == 'Booster' then"
position = "before"
payload = '''
if specific_vars and specific_vars.bonus_xchips then
	localize{type = 'other', key = 'card_extra_xchips', nodes = desc_nodes, vars = {specific_vars.bonus_xchips}}
end
if specific_vars and specific_vars.bonus_mult then
	localize{type = 'other', key = 'card_extra_mult', nodes = desc_nodes, vars = {specific_vars.bonus_mult}}
end
if specific_vars and specific_vars.bonus_xmult then
	localize{type = 'other', key = 'card_extra_xmult', nodes = desc_nodes, vars = {specific_vars.bonus_xmult}}
end
if specific_vars and specific_vars.bonus_hchips then
	localize{type = 'other', key = 'card_extra_hchips', nodes = desc_nodes, vars = {specific_vars.bonus_hchips}}
end
if specific_vars and specific_vars.bonus_hxchips then
	localize{type = 'other', key = 'card_extra_hxchips', nodes = desc_nodes, vars = {specific_vars.bonus_hxchips}}
end
if specific_vars and specific_vars.bonus_hmult then
	localize{type = 'other', key = 'card_extra_hmult', nodes = desc_nodes, vars = {specific_vars.bonus_hmult}}
end
if specific_vars and specific_vars.bonus_hxmult then
	localize{type = 'other', key = 'card_extra_hxmult', nodes = desc_nodes, vars = {specific_vars.bonus_hxmult}}
end'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "nominal_chips = self.base.nominal > 0 and self.base.nominal or nil,"
position = "after"
payload = '''
bonus_xchips = (self.ability.perma_xbonus or 0) > 1 and (self.ability.perma_xbonus or 0) or nil,
bonus_mult = (self.ability.perma_mult or 0) > 0 and (self.ability.perma_mult or 0) or nil,
bonus_xmult = (self.ability.perma_xmult or 0) > 1 and (self.ability.perma_xmult or 0) or nil,
bonus_hchips = (self.ability.perma_hbonus or 0) > 0 and (self.ability.perma_hbonus or 0) or nil,
bonus_hxchips = (self.ability.perma_hxbonus or 0) > 1 and (self.ability.perma_hxbonus or 0) or nil,
bonus_hmult = (self.ability.perma_hmult or 0) > 0 and (self.ability.perma_hmult or 0) or nil,
bonus_hxmult = (self.ability.perma_hxmult or 0) > 1 and (self.ability.perma_hxmult or 0) or nil,'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "perma_bonus = self.ability and self.ability.perma_bonus or 0,"
position = "after"
payload = '''
perma_xbonus = self.ability and self.ability.perma_xbonus or 1,
perma_mult = self.ability and self.ability.perma_mult or 0,
perma_xmult = self.ability and self.ability.perma_xmult or 1,
perma_hbonus = self.ability and self.ability.perma_hbonus or 0,
perma_hxbonus = self.ability and self.ability.perma_hxbonus or 1,
perma_hmult = self.ability and self.ability.perma_hmult or 0,
perma_hxmult = self.ability and self.ability.perma_hxmult or 1,
'''
match_indent = true
overwrite = false

# generate_card_ui()
[[patches]]
[patches.regex]
target = 'functions/common_events.lua'
pattern = "(?<indent>[\t ]*)if v == 'eternal'"
line_prepend = '$indent'
position = 'before'
payload = '''if SMODS.Stamp.reverse_lookup[v] then info_queue[#info_queue+1] = {key = v, set = 'Other' } end'''
match_indent = true

# get_badge_colour()
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = 'return G.BADGE_COL[key] or {1, 0, 0, 1}'
position = 'before'
payload = '''
for k, v in pairs(AMM.Aspects) do
	G.BADGE_COL[k:lower()..'_aspect'] = v.badge_colour or v.colour
end
for k, v in pairs(SMODS.Stamps) do
	G.BADGE_COL[k:lower()..'_stamp'] = v.colour
end
'''
match_indent = true

# Card:draw()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.seal then badges[#badges + 1] = string.lower(self.seal)..'_seal' end"
position = "after"
payload = '''if self.seal and SMODS.Stamp.reverse_lookup[self.seal..'_stamp'] then badges[#badges] = string.lower(self.seal)..'_stamp' end'''
match_indent = true


# Card:set_seal()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:set_seal(_seal, silent, immediate)"
position = "after"
payload = '''
	local prev_seal_stamp = self:get_seal()
	local seal_stamp_obj
	if prev_seal_stamp and prev_seal_stamp ~= _seal then
		seal_stamp_obj = SMODS.Seals[string.lower(prev_seal_stamp)]
		if seal_stamp_obj and seal_stamp_obj.unapply and type(seal_stamp_obj.unapply) == "function" then
			seal_stamp_obj.unapply(self)
		end
		seal_stamp_obj = SMODS.Stamps[string.lower(prev_seal_stamp)]
		if seal_stamp_obj and seal_stamp_obj.unapply and type(seal_stamp_obj.unapply) == "function" then
			seal_stamp_obj.unapply(self)
		end
	end
	seal_stamp_obj = nil
'''
match_indent = true

# Card:set_seal()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Gold Card' and self.seal == 'Gold' and self.playing_card then"
position = "before"
payload = '''
	local seal_stamp_obj
	if _seal then
		seal_stamp_obj = SMODS.Seals[string.lower(_seal)]
		if seal_stamp_obj and seal_stamp_obj.apply and type(seal_stamp_obj.apply) == "function" then
			seal_stamp_obj.apply(self)
		end
		seal_stamp_obj = SMODS.Stamps[string.lower(_seal)]
		if seal_stamp_obj and seal_stamp_obj.apply and type(seal_stamp_obj.apply) == "function" then
			seal_stamp_obj.apply(self)
		end
	end
'''
match_indent = true

# Card:add_to_deck()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:add_to_deck(from_debuff)"
position = "after"
payload = '''
	if (not self.added_to_deck) and G.STAGE == G.STAGES.RUN then
		if self.seal then
			seal_stamp_obj = SMODS.Seals[string.lower(self.seal)]
			if seal_stamp_obj and seal_stamp_obj.deck_add and type(seal_stamp_obj.deck_add) == 'function' then
				seal_stamp_obj.deck_add(self)
			end
			seal_stamp_obj = SMODS.Stamps[string.lower(self.seal)]
			if seal_stamp_obj and seal_stamp_obj.deck_add and type(seal_stamp_obj.deck_add) == "function" then
				seal_stamp_obj.deck_add(self)
			end
		end
	end
'''
match_indent = true

# Card:remove_from_deck()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:remove_from_deck(from_debuff)"
position = "after"
payload = '''
	if self.added_to_deck and G.STAGE == G.STAGES.RUN then
		if self.seal then
			seal_stamp_obj = SMODS.Seals[string.lower(self.seal)]
			if seal_stamp_obj and seal_stamp_obj.deck_remove and type(seal_stamp_obj.deck_remove) == 'function' then
				seal_stamp_obj.deck_remove(self)
			end
			seal_stamp_obj = SMODS.Stamps[string.lower(self.seal)]
			if seal_stamp_obj and seal_stamp_obj.deck_remove and type(seal_stamp_obj.deck_remove) == "function" then
				seal_stamp_obj.deck_remove(self)
			end
		end
	end
'''
match_indent = true

# Game:init_game_object()
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "last_tarot_planet = nil,"
position = "before"
payload = '''
amm_data = {
	suit_levels = {
	},
},
'''
match_indent = true


# Card:generate_UIBox_ability_table()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "nominal_chips = self.base.nominal > 0 and self.base.nominal or nil,"
position = "after"
payload = '''
amm_suit_bonus = G.GAME.amm_data.suit_levels[self.base.suit],
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif _c.set == 'Enhanced' then"
position = "before"
payload = '''
if specific_vars.amm_suit_bonus and specific_vars.amm_suit_bonus.level > 1 then
	localize{type = 'other', key = 'card_amm_suit_bonus', nodes = desc_nodes, vars = {specific_vars.amm_suit_bonus.level, specific_vars.amm_suit_bonus.chips, specific_vars.amm_suit_bonus.mult, card and localize(card.base.suit, "suits_plural"), colours = {
			(specific_vars.amm_suit_bonus.level<=1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, specific_vars.amm_suit_bonus.level)]),
			G.C.SUITS[card and card.base.suit],
		}}}
end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif _c.set == 'Booster' then"
position = "before"
payload = '''
if card and card.ability.effect ~= 'Stone Card' and (not card.config.center.no_suit) and (specific_vars and specific_vars.amm_suit_bonus and specific_vars.amm_suit_bonus.level > 1) then
	localize{type = 'other', key = 'card_amm_suit_bonus', nodes = desc_nodes, vars = {specific_vars.amm_suit_bonus.level, specific_vars.amm_suit_bonus.chips, specific_vars.amm_suit_bonus.mult, card and localize(card.base.suit, "suits_plural"), colours = {
			(specific_vars.amm_suit_bonus.level<=1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, specific_vars.amm_suit_bonus.level)]),
			G.C.SUITS[card and card.base.suit],
		}}}
end
'''
match_indent = true
overwrite = false

# G.UIDEF.run_info
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "tab_definition_function = create_UIBox_current_hands,"
position = "after"
payload = '''
},{
	label = localize('b_suits'),
	tab_definition_function = create_UIBox_current_suits,

'''
match_indent = true
overwrite = false

# yeet
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/game_object.lua"]'
pattern = '''
if specific_vars and specific_vars.bonus_chips then
	local remaining_bonus_chips = specific_vars.bonus_chips - (self.config.bonus or 0)
	if remaining_bonus_chips > 0 then
		localize { type = 'other', key = 'card_extra_chips', nodes = desc_nodes, vars = { specific_vars.bonus_chips - (self.config.bonus or 0) } }
	end
end
'''
position = "after"
payload = '''
if specific_vars and specific_vars.bonus_xchips then
	localize{type = 'other', key = 'card_extra_xchips', nodes = desc_nodes, vars = {specific_vars.bonus_xchips}}
end
if specific_vars and specific_vars.bonus_mult then
	localize{type = 'other', key = 'card_extra_mult', nodes = desc_nodes, vars = {specific_vars.bonus_mult}}
end
if specific_vars and specific_vars.bonus_xmult then
	localize{type = 'other', key = 'card_extra_xmult', nodes = desc_nodes, vars = {specific_vars.bonus_xmult}}
end
if specific_vars and specific_vars.bonus_hchips then
	localize{type = 'other', key = 'card_extra_hchips', nodes = desc_nodes, vars = {specific_vars.bonus_hchips}}
end
if specific_vars and specific_vars.bonus_hxchips then
	localize{type = 'other', key = 'card_extra_hxchips', nodes = desc_nodes, vars = {specific_vars.bonus_hxchips}}
end
if specific_vars and specific_vars.bonus_hmult then
	localize{type = 'other', key = 'card_extra_hmult', nodes = desc_nodes, vars = {specific_vars.bonus_hmult}}
end
if specific_vars and specific_vars.bonus_hxmult then
	localize{type = 'other', key = 'card_extra_hxmult', nodes = desc_nodes, vars = {specific_vars.bonus_hxmult}}
end
if card and (not SMODS.has_no_suit(card)) and (specific_vars and specific_vars.amm_suit_bonus and specific_vars.amm_suit_bonus.level > 1) then
	localize{type = 'other', key = 'card_amm_suit_bonus', nodes = desc_nodes, vars = {specific_vars.amm_suit_bonus.level, specific_vars.amm_suit_bonus.chips, specific_vars.amm_suit_bonus.mult, card and localize(card.base.suit, "suits_plural"), colours = {
			(specific_vars.amm_suit_bonus.level<=1 and G.C.UI.TEXT_DARK or G.C.HAND_LEVELS[math.min(7, specific_vars.amm_suit_bonus.level)]),
			G.C.SUITS[card and card.base.suit],
		}}}
end
'''
match_indent = true
overwrite = false

# eval_card()
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "-- TARGET: main scoring on played cards"
match_indent = true
overwrite = false
position = 'after'
payload = '''
local x_chips = card:amm_get_chip_x_bonus()
if x_chips > 0 then 
	ret.playing_card.x_chips = x_chips
end
'''
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "-- TARGET: main scoring on held cards"
match_indent = true
overwrite = false
position = 'after'
payload = '''
local h_chips = card:amm_get_chip_h_bonus()
if h_chips > 0 then 
	ret.playing_card.chips = h_chips
end
local h_x_chips = card:amm_get_chip_h_x_bonus()
if h_x_chips > 0 then 
	ret.playing_card.x_chips = h_x_chips
end
'''

# new context? new context? new context?
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''
				G.jokers.config.card_limit = G.jokers.config.card_limit + self.edition.card_limit
			end
		end
	end
end
'''
position = "after"
payload = '''
SMODS.calculate_context({amm_added_card = true, from_debuff = from_debuff, other_card = self})
'''
match_indent = true
overwrite = false

# yeet
[[patches]]
[patches.pattern]
target = '=[SMODS Pokermon "functions/pokefunctions.lua"]'
pattern = '''
local previous_upgrade = nil
'''
position = "after"
payload = '''
local previous_stamp = nil

if card.seal and SMODS.Stamps[string.lower(card.seal)] then
	previous_stamp = card.seal
end
'''
match_indent = true
overwrite = false

# yeet
[[patches]]
[patches.pattern]
target = '=[SMODS Pokermon "functions/pokefunctions.lua"]'
pattern = '''
if previous_edition then
'''
position = "before"
payload = '''
if previous_stamp then
	new_card:set_seal(previous_stamp, nil, true)
end
'''
match_indent = true
overwrite = false


#
# ODDITYAPI
#

# G.FUNCS.use_card()
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if card.area and (not nc or card.area == G.pack_cards) then card.area:remove_card(card) end"
position = "before"
payload = '''local oddityapi_check_booster = false
if card.ability.set == "Oddity" and card.area == G.pack_cards then nc = true
oddityapi_check_booster = true end'''
match_indent = true
overwrite = false
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "e.config.ref_table:use_consumeable(area)"
position = "before"
payload = '''if oddityapi_check_booster == false then'''
match_indent = true
overwrite = false
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "SMODS.calculate_context({using_consumeable = true, consumeable = card, area = card.from_area})"
position = "after"
payload = '''end'''
match_indent = true
overwrite = false

# G.FUNCS.can_use_consumeable()
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if e.config.ref_table:can_use_consumeable() then"
position = "before"
payload = '''if e.config.ref_table.ability.set == 'Oddity' and e.config.ref_table.area == G.pack_cards then
	if #G.consumeables.cards < G.consumeables.config.card_limit then
		e.config.colour = G.C.GREEN
		e.config.button = 'use_card'
	elseif #G.consumeables.cards >= G.consumeables.config.card_limit then
		e.config.colour = G.C.UI.BACKGROUND_INACTIVE
		e.config.button = nil
	end
else'''
match_indent = true
overwrite = false

# this is dumb
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "G.FUNCS.can_select_card = function(e)"
position = "before"
payload = '''end'''
match_indent = true
overwrite = false

# get_current_pool()
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "for k, v in ipairs(_starting_pool) do"
match_indent = true
overwrite = false
position = 'before'
payload = '''
if _legendary and _type == 'Oddity' then
	_starting_pool, _pool_key = SMODS.ConsumableTypes[_type].rarity_pools[-4], _type.."-4"..(_append or '')
end
'''


#
# ASPECTAPI
#

# Game:start_up()
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = "self.shared_seals = {"
match_indent = true
overwrite = false
position = 'before'
payload = '''
self.shared_aspects = {}
'''

# Game:init_item_prototypes	()
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = "self.P_SEALS = {"
match_indent = true
overwrite = false
position = 'before'
payload = '''
self.P_ASPECTS = {}
'''

# Game:init_item_prototypes()
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = "self.P_CENTER_POOLS = {"
match_indent = true
overwrite = false
position = 'after'
payload = '''
Aspect = {},
'''

# Card:generate_UIBox_ability_table()
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "if self.seal then badges[#badges + 1] = string.lower(self.seal)..'_seal' end"
match_indent = true
overwrite = false
position = 'after'
payload = "if self.aspect then badges[#badges + 1] = string.lower(self.aspect)..'_aspect' end"

# Card:draw()
# this line of text is the worst thing
# if anyone knows how to do this without overwriting it'd be swell
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "if self.edition or self.seal or self.ability.eternal or self.ability.rental or self.ability.perishable or self.sticker or self.ability.set == 'Spectral' or self.debuff or self.greyed or self.ability.name == 'The Soul' or self.ability.set == 'Voucher' or self.ability.set == 'Booster' or self.config.center.soul_pos or self.config.center.demo then"
match_indent = true
overwrite = true
position = 'at'
payload = "if self.edition or self.seal or self.aspect or self.bottle or self.ability.eternal or self.ability.rental or self.ability.perishable or self.sticker or self.ability.set == 'Spectral' or self.debuff or self.greyed or self.ability.name == 'The Soul' or self.ability.set == 'Voucher' or self.ability.set == 'Booster' or self.config.center.soul_pos or self.config.center.demo then"
# this part is normal (totally nothing jank here either)
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "if self.seal == 'Gold' then G.shared_seals[self.seal]:draw_shader('voucher', nil, self.ARGS.send_to_shader, nil, self.children.center) end"
match_indent = true
overwrite = false
position = 'after'
payload = '''
end
if self.aspect then
	G.shared_aspects[self.aspect].role.draw_major = self
	G.shared_aspects[self.aspect]:draw_shader('dissolve', nil, nil, nil, self.children.center)
'''

# Card:save()
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "seal = self.seal,"
match_indent = true
overwrite = false
position = 'after'
payload = '''
aspect = self.aspect,
'''
# Card:load()
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "self.seal = cardTable.seal"
match_indent = true
overwrite = false
position = 'after'
payload = '''
self.aspect = cardTable.aspect
'''

# eval_card()
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "-- TARGET: evaluate your own repetition effects"
match_indent = true
overwrite = false
position = 'after'
payload = '''
if card.aspect then
	local aspects = card:calculate_aspect(context)
	if aspects then
		ret.aspects = aspects
	end
end
'''
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "-- TARGET: evaluate your own general effects"
match_indent = true
overwrite = false
position = 'after'
payload = '''
if card.aspect then
	local aspects = card:calculate_aspect(context)
	if aspects then
		ret.aspects = aspects
	end
end
'''

# generate_card_ui()
#[[patches]]
#[patches.pattern]
#target = 'functions/common_events.lua'
#pattern = "local seal = G.P_SEALS[v] or G.P_SEALS[SMODS.Seal.badge_to_key[v] or '']"
#match_indent = true
#overwrite = false
#position = 'before'
#payload = '''
#local aspect = G.P_ASPECTS[v] or G.P_ASPECTS[AMM.Aspect.badge_to_key[v] or '']
#if aspect then
#	info_queue[#info_queue+1] = aspect
#end
#'''
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''   end

    if main_end then 
        desc_nodes[#desc_nodes+1] = main_end 
    end'''
match_indent = true
overwrite = false
position = 'before'
payload = '''
elseif _c.set == "Aspect" then
    localize{type = 'descriptions', key = _c.key, set = "Other", nodes = desc_nodes, vars = _c.vars or loc_vars}
'''

# copy_card()
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "new_card:set_seal(other.seal, true)"
match_indent = true
overwrite = false
position = 'before'
payload = '''
new_card:set_aspect(other.aspect,true)
'''

# G.UIDEF.card_h_popup()
# dirty patch, open to improvements
# you two have any ideas?
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = 'badges[#badges + 1] = create_badge(localize(v, "labels"), get_badge_colour(v))'
match_indent = true
overwrite = true
position = 'at'
payload = '''
badges[#badges + 1] = create_badge(localize(v, "labels"), get_badge_colour(v), amm_get_badge_text_colour(v))
'''

#
# BOTTLE API? IDFK, BOTTLES
#

# Game:start_up()
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = "self.shared_seals = {"
match_indent = true
overwrite = false
position = 'before'
payload = '''
--self.shared_bottle = nil
'''

# Card:generate_UIBox_ability_table()
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "if self.seal then badges[#badges + 1] = string.lower(self.seal)..'_seal' end"
match_indent = true
overwrite = false
position = 'after'
payload = "if self.bottle then badges[#badges + 1] = 'bottle' end"

# this part is still normal
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "if self.seal == 'Gold' then G.shared_seals[self.seal]:draw_shader('voucher', nil, self.ARGS.send_to_shader, nil, self.children.center) end"
match_indent = true
overwrite = false
position = 'after'
payload = '''
end
if self.bottle then
	G.shared_bottle.role.draw_major = self
	G.shared_bottle:draw_shader('dissolve', nil, nil, nil, self.children.center)
'''

# copy_card()
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "new_card:set_seal(other.seal, true)"
match_indent = true
overwrite = false
position = 'before'
payload = '''
new_card.bottle = other.bottle
'''

# Card:save()
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "seal = self.seal,"
match_indent = true
overwrite = false
position = 'after'
payload = '''
bottle = self.bottle,
'''
# Card:load()
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "self.seal = cardTable.seal"
match_indent = true
overwrite = false
position = 'after'
payload = '''
self.bottle = cardTable.bottle
'''